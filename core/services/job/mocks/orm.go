// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/smartcontractkit/chainlink/core/store/models"

	pipeline "github.com/smartcontractkit/chainlink/core/services/pipeline"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *ORM) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateJob provides a mock function with given fields: jobSpec, pipelineSpec
func (_m *ORM) CreateJob(jobSpec *models.JobSpecV2, pipelineSpec *pipeline.Spec) error {
	ret := _m.Called(jobSpec, pipelineSpec)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.JobSpecV2, *pipeline.Spec) error); ok {
		r0 = rf(jobSpec, pipelineSpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJob provides a mock function with given fields: ctx, id
func (_m *ORM) DeleteJob(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnclaimedJobs provides a mock function with given fields: ctx
func (_m *ORM) UnclaimedJobs(ctx context.Context) ([]models.JobSpecV2, error) {
	ret := _m.Called(ctx)

	var r0 []models.JobSpecV2
	if rf, ok := ret.Get(0).(func(context.Context) []models.JobSpecV2); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.JobSpecV2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
